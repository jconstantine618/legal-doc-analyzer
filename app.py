# legal_doc_analyzer_streamlit.py
# A minimal Streamlit agent that lets a user upload a legal document, choose an analysis
# perspective, and receive a deep‚Äëdive summary + risk assessment generated by an LLM.
# -----------------------------------------------------------------------------
# Usage
# 1. Save this file and run:  streamlit run legal_doc_analyzer_streamlit.py
# 2. Set your OpenAI API key in the environment or via Streamlit secrets.
# 3. Upload a PDF, Word, or plain‚Äëtext file, pick your perspective, and click "Analyze".
# -----------------------------------------------------------------------------

import os
import io
import base64
from typing import List

import streamlit as st
import openai
from PyPDF2 import PdfReader
from docx import Document as DocxDocument

# --------------------------------------------------
# Configuration
# --------------------------------------------------
# Recommended: store your key with `streamlit secrets set OPENAI_API_KEY "sk‚Äë..."`.
openai.api_key = os.getenv("OPENAI_API_KEY", st.secrets.get("OPENAI_API_KEY", ""))
MODEL_NAME = "gpt-4o-mini"  # adjust as needed
MAX_CHARS = 25_000           # safety limit for very large files

# --------------------------------------------------
# Helper functions
# --------------------------------------------------

def load_file_text(uploaded_file: st.runtime.uploaded_file_manager.UploadedFile) -> str:
    """Extract raw text from PDF, DOCX, or TXT."""
    filename = uploaded_file.name.lower()
    data = uploaded_file.read()
    if filename.endswith(".pdf"):
        pdf_reader = PdfReader(io.BytesIO(data))
        text = "\n".join(page.extract_text() or "" for page in pdf_reader.pages)
    elif filename.endswith(".docx"):
        doc = DocxDocument(io.BytesIO(data))
        text = "\n".join(p.text for p in doc.paragraphs)
    else:  # fall back to plain text
        text = data.decode("utf-8", errors="ignore")
    return text[:MAX_CHARS]


def call_llm(perspective: str, document_text: str) -> str:
    """Send prompt to the LLM and return formatted response."""
    prompt = f"""
You are an expert legal analyst acting as the {{ {perspective} }} for a small‚Äëto‚Äëmid‚Äësize business.
Review the following document and provide:
1. A concise executive summary (‚â§ 200 words).
2. Key obligations and responsibilities the business assumes.
3. Major risks or liabilities, ranked by severity (High / Medium / Low).
4. Recommended mitigation steps for each risk.
5. Any missing or ambiguous clauses that should be clarified.

Respond in markdown with clear headings and bullet points.
---
DOCUMENT:\n\n{document_text}
"""
    response = openai.chat.completions.create(
        model=MODEL_NAME,
        messages=[{"role": "user", "content": prompt}],
        temperature=0.2,
    )
    return response.choices[0].message.content.strip()


# --------------------------------------------------
# Streamlit UI
# --------------------------------------------------

st.set_page_config(page_title="Legal Doc Analyzer", layout="wide")
st.title("üìÑ Legal Document Analyzer")

st.markdown(
    "Upload a legal contract or policy, choose the lens through which you want to view it, and get an instant deep‚Äëdive summary of obligations and risks."
)

# Sidebar ‚Äì perspective selection
with st.sidebar:
    st.header("üîç Analysis Perspective")
    PERSPECTIVES: List[str] = [
        "Company Owner / CEO",
        "Investor / Shareholder",
        "Compliance Officer",
        "General Counsel",
        "Finance (CFO)",
        "Human Resources Director",
        "Operations Manager",
        "Sales / BD Lead",
    ]
    selected_perspective = st.selectbox("Choose your perspective", PERSPECTIVES, index=0)
    st.markdown(
        "Feel free to pick the lens that matches your role. The analysis will stress risks most pertinent to that function."
    )

# Main area ‚Äì file upload and analysis
uploaded_file = st.file_uploader(
    "Upload PDF, DOCX, or TXT", type=["pdf", "docx", "txt"], accept_multiple_files=False
)

if uploaded_file is not None:
    doc_text = load_file_text(uploaded_file)
    st.success(f"Loaded **{uploaded_file.name}** (first {len(doc_text):,} chars).")

    if st.button("‚öñÔ∏è Analyze", disabled=(openai.api_key == "")):
        if openai.api_key == "":
            st.error("No OpenAI API key found. Please add it via environment variable or Streamlit secrets.")
        else:
            with st.spinner("Analyzing‚Ä¶ this may take a minute ‚Ä¶"):
                try:
                    analysis = call_llm(selected_perspective, doc_text)
                    st.markdown("## üìù Analysis Report")
                    st.markdown(analysis)
                except Exception as e:
                    st.error(f"LLM analysis failed: {e}")
else:
    st.info("‚¨ÜÔ∏è  Upload a document to begin.")

# Footer
st.markdown("---")
st.markdown(
    "_Disclaimer: This tool provides automated analysis and does not constitute legal advice. Always consult qualified counsel for final decisions._"
)
